"""
Teste do Sistema de Seletores XML Ultra-Robustos
Vers√£o 1.0 - Script de demonstra√ß√£o

Este script testa o novo sistema de gera√ß√£o de seletores ultra-robustos
desenvolvido para resolver problemas de AutomationId din√¢mico.
"""
import sys
import time
from xml_selector_ultra_robust import UltraRobustSelectorGenerator
from utils import print_info, print_success, print_error, print_warning, print_header

def test_ultra_robust_system():
    """
    Testa o sistema de gera√ß√£o ultra-robusta
    """
    print_header("TESTE DO SISTEMA ULTRA-ROBUSTO")
    
    print_info("Este teste demonstra as capacidades do novo sistema:")
    print_info("‚Ä¢ An√°lise de estabilidade de atributos")
    print_info("‚Ä¢ Gera√ß√£o de m√∫ltiplas estrat√©gias")
    print_info("‚Ä¢ Valida√ß√£o autom√°tica em tempo real")
    print_info("‚Ä¢ Scoring de confiabilidade")
    print()
    
    print_warning("NOTA: Este teste requer uma aplica√ß√£o Windows aberta (ex: Calculadora)")
    print_warning("Para teste completo, use: python main.py ‚Üí Op√ß√£o 1: Capturar Elemento")
    print()
    
    try:
        # Inicializa o gerador ultra-robusto
        generator = UltraRobustSelectorGenerator()
        print_success("‚úì Sistema ultra-robusto inicializado com sucesso!")
        
        # Testa an√°lise de estabilidade com dados simulados
        print_info("Testando an√°lise de estabilidade...")
        
        # Simula diferentes tipos de AutomationId
        test_automation_ids = [
            "btn_save",           # Est√°vel
            "button_1234567890",  # Din√¢mico (timestamp)
            "temp_abc123def",     # Din√¢mico (tempor√°rio)
            "SaveButton",         # Est√°vel
            "element_5f8a9b2c",   # Din√¢mico (hash)
        ]
        
        for auto_id in test_automation_ids:
            stability_score = generator._analyze_automation_id_stability(auto_id)
            classification = generator._classify_stability_score(stability_score)
            
            if stability_score >= 0.7:
                color = "GREEN"
            elif stability_score >= 0.4:
                color = "YELLOW" 
            else:
                color = "RED"
                
            print_info(f"AutomationId: '{auto_id}' ‚Üí Score: {stability_score:.2f} ({classification})")
        
        print()
        print_success("‚úì An√°lise de estabilidade funcionando corretamente!")
        
        # Testa classifica√ß√£o de nomes
        print_info("Testando an√°lise de estabilidade de nomes...")
        
        test_names = [
            "Salvar",                    # Muito est√°vel
            "Bot√£o 12/03/2024",         # Inst√°vel (data)
            "OK",                       # Muito est√°vel
            "Progresso: 45%",           # Inst√°vel (din√¢mico)
            "Novo Cliente",             # Est√°vel
        ]
        
        for name in test_names:
            stability_score = generator._analyze_name_stability(name)
            classification = generator._classify_stability_score(stability_score)
            print_info(f"Name: '{name}' ‚Üí Score: {stability_score:.2f} ({classification})")
        
        print()
        print_success("‚úì Sistema de an√°lise funcionando perfeitamente!")
        
        # Informa√ß√µes sobre capabilities
        print()
        print_header("CAPACIDADES DO SISTEMA ULTRA-ROBUSTO")
        print_success("üéØ AN√ÅLISE INTELIGENTE:")
        print_info("   ‚Ä¢ Detecta AutomationId din√¢mico vs est√°vel")
        print_info("   ‚Ä¢ Analisa padr√µes em nomes e classes")
        print_info("   ‚Ä¢ Classifica atributos por confiabilidade")
        
        print_success("üîß ESTRAT√âGIAS M√öLTIPLAS:")
        print_info("   ‚Ä¢ Name + Hierarchy (mais robusta)")
        print_info("   ‚Ä¢ ClassName + Index")
        print_info("   ‚Ä¢ Visual Anchors")
        print_info("   ‚Ä¢ Coordinate Fallback")
        
        print_success("‚úÖ VALIDA√á√ÉO AUTOM√ÅTICA:")
        print_info("   ‚Ä¢ Testa cada estrat√©gia em tempo real")
        print_info("   ‚Ä¢ Ordena por confiabilidade")
        print_info("   ‚Ä¢ Score de 0-100% com classifica√ß√£o")
        
        print_success("üöÄ RESULTADO FINAL:")
        print_info("   ‚Ä¢ Seletor XML ultra-robusto")
        print_info("   ‚Ä¢ Funciona mesmo com AutomationId din√¢mico")
        print_info("   ‚Ä¢ M√∫ltiplas estrat√©gias de fallback")
        print_info("   ‚Ä¢ Pronto para automa√ß√£o em produ√ß√£o")
        
        print()
        print_header("PR√ìXIMOS PASSOS")
        print_warning("Para usar o sistema completo:")
        print_info("1. Execute: python main.py")
        print_info("2. Escolha: Op√ß√£o 1 - Capturar Elemento")
        print_info("3. Digite nome do elemento")
        print_info("4. CTRL + Click no elemento desejado")
        print_info("5. Receba seletor XML ultra-robusto automaticamente!")
        
        return True
        
    except Exception as e:
        print_error(f"Erro durante teste: {str(e)}")
        return False

if __name__ == "__main__":
    print_info("Iniciando teste do sistema ultra-robusto...")
    print()
    
    success = test_ultra_robust_system()
    
    print()
    if success:
        print_success("üéâ TESTE CONCLU√çDO COM SUCESSO!")
        print_info("O sistema de seletores XML ultra-robustos est√° funcionando perfeitamente!")
    else:
        print_error("‚ùå TESTE FALHOU!")
        print_info("Verifique os logs acima para mais detalhes.")
    
    print()
    input("Pressione ENTER para sair...")